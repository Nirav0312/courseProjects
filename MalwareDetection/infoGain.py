import numpy as np
import pickle
import math

if __name__ == "__main__":
    MF = 5113.0
    BF = 5125.0
    TF = float(BF + MF)

    infogain_dict = dict()
    with open("data//Static_Analysis_RAWDATA//featureset_combined", 'rb') as file:
        ngrams = pickle.load(file)

    with open("data//Static_Analysis_RAWDATA//feature_set_dict_benign", 'rb') as file:
        ngrams_b = pickle.load(file)

    with open("data//Static_Analysis_RAWDATA//feature_set_dict_malware", 'rb') as file:
        ngrams_m = pickle.load(file)

    for word in ngrams:

        try:
            BTA = float(ngrams_b[word])
        except KeyError:
            BTA = 0.0

        try:
            MTA = float(ngrams_m[word])
        except KeyError:
            MTA = 0.0

        TA = float(MTA + BTA)
        TNA = float(TF-TA)
        BTNA = float(BF-BTA)
        MTNA = float(MF-MTA)

        if(TA==0.0):
            _1 = 0.0
        elif(BTA == 0.0):
            _1 = (TA/TF)*(0.0 +  (MTA/TA)*math.log2(MTA/TA))
        elif(MTA==0.0):
            _1 = (TA/TF)*((BTA/TA)*math.log2(BTA/TA) +  0.0)
        else:
            _1 = (TA/TF)*((BTA/TA)*math.log2(BTA/TA) +  (MTA/TA)*math.log2(MTA/TA))


        if(TNA==0.0):
            _2 = 0.0
        elif(BTNA==0.0):
            _2 = (TNA/TF)*(0.0 +  (MTNA/TNA)*math.log2(MTNA/TNA))
        elif(MTNA==0.0):
            _2 = (TNA/TF)*((BTNA/TNA)*math.log2(float(BTNA/TNA)) + 0.0)
        else:
            _2 = (TNA/TF)*((BTNA/TNA)*math.log2(float(BTNA/TNA)) +  (MTNA/TNA)*math.log2(MTNA/TNA))

        child_antropy = (_1 + _2)*-1.0

        infogain_dict[word] = 1.0 - child_antropy


    infogain_dict = sorted(infogain_dict.items(),key=lambda kv:(kv[1],kv[0]))


    with open("data//Static_Analysis_RAWDATA//infogain", 'wb') as file:
        pickle.dump(infogain_dict,file)


    for i in range(50):
        print(str(infogain_dict[i]))


    with open("data//Static_Analysis_RAWDATA//top_ngrams", 'wb') as file:
        pickle.dump(keys[-1000:],file)