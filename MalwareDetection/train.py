import numpy as np
import pickle
import os
import random
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score,accuracy_score
from sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier
from sklearn import tree

def read_benign(X,y):
    base_path = "data//Static_Analysis_RAWDATA"
    benign = "Benign"
    folders = os.listdir(base_path + "//" + benign)
    folders = sorted(folders)

    i = 0
    current_set = set()
    for folder in folders:
        print(i)
        i += 1

        feature_vector_file = base_path + "//" + benign + "//" + folder + "//" + "feature_vector"

        # print(opcode_file)

        with open(feature_vector_file, 'rb') as pickle_file:
            feature_vector = pickle.load(pickle_file)

            X.append(feature_vector)
            y.append(random.randrange(0,5))

    print(len(set(y)))

    return X, y


def read_malware(X,y):
    base_path = "data//Static_Analysis_RAWDATA//Malware"

    folders_category = os.listdir(base_path)
    folders_category = sorted(folders_category)


    i=0
    cat_count = 0
    for category in folders_category:
        # print(category)

        folders = os.listdir(base_path + "//" + category)

        for folder in folders:
            cat_count += 1
            # print(i)
            feature_vector_file = base_path + "//" + category + "//" + folder + "//" + "feature_vector"

            with open(feature_vector_file, 'rb') as pickle_file:
                feature_vector = pickle.load(pickle_file)
                X.append(feature_vector)
                y.append(i)

        i+=1
        print(cat_count)
        cat_count = 0

    return X,y

if __name__ == "__main__":

    X = list()
    y = list()

    X,y = read_benign(X,y)
    # X,y = read_malware(X,y)

    X = np.array(X)
    y = np.array(y)

    print(X.shape)
    print(y.shape)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.01,random_state=32)

    print(len(X_train))


    clf = RandomForestClassifier(n_estimators=100)

    clf.fit(X_train, y_train)

    with open("C://_D//M.tech//cs698m//static//static_model", 'wb') as file:
        pickle.dump(clf, file)


    y_pred = clf.predict(X_train)

    print("F1 score: "+str(f1_score(y_train,y_pred,average='weighted')))
    print("Accuracy: "+str(accuracy_score(y_train,y_pred)))
